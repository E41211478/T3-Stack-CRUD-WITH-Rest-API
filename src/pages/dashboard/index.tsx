import { GetServerSidePropsContext, type NextPage } from "next";
import { signOut, useSession, getSession } from "next-auth/react";
import Head from "next/head";
import { Fragment, useState } from "react";
import Modal from "../components/common/Modal";
import { api } from "../../utils/api";

interface FormData {
    title: string;
    author: string;
    description: string;
    price: number;
}

const Dashboard: NextPage = () => {

    const { data: sessionData } = useSession();

    const { data: secretMessage } = api.example.getSecretMessage.useQuery(
        undefined, // no input
        { enabled: sessionData?.user !== undefined },
    );

    const googleSignOut = (): void => {
        signOut({ callbackUrl: "/" }).then(console.log).catch(console.error);
        // hapus session
    };


    const [showModal, setShowModal] = useState<boolean>(false);

    const utils = api.useContext();
    const addBooks = api.books.createBook.useMutation({
        onMutate: () => {
            utils.books.allBooks.cancel().then(console.log).catch(console.error);
        },
        onSettled: () => {
            utils.books.allBooks.invalidate().then(console.log).catch(console.error);
        },
    });

    const [data, setData] = useState<FormData>({
        title: "",
        author: "",
        description: "",
        price: 0
    });

    const handleTitileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setData({
            ...data,
            title: e.target.value
        });
    };

    const handleAuthorChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setData({
            ...data,
            author: e.target.value
        });
    };

    const handleDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        setData({
            ...data,
            description: e.target.value
        });
    };

    const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setData({
            ...data,
            price: parseInt(e.target.value)
        });
    };



    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <Fragment>
                    <h1 className="flex justify-around items-center mt-5">
                        <p className="text-center text-2xl text-black">
                            {sessionData?.user?.email}
                            {<span> - {sessionData?.user?.name} </span>}
                            {secretMessage && <span> - {secretMessage}</span>}
                        </p>
                        <button
                            className="rounded-full bg-black px-10 py-3 font-semibold text-white no-underline transition hover:bg-black/20"
                            onClick={googleSignOut}
                        >
                            Sign Out
                        </button>
                    </h1>
                    {/* button modal create books */}
                    <div className="flex mx-24 mt-12">
                        <button onClick={() => setShowModal(true)} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            {"Create Books"}
                        </button>
                    </div>
                    {/* modal create books */}
                    <Modal isVisible={showModal} onClose={() => setShowModal(false)}>
                        <form
                            onSubmit={
                                (e) => {
                                    e.preventDefault();
                                    addBooks.mutate({
                                        title: data.title,
                                        author: data.author,
                                        description: data.description,
                                        price: data.price
                                    });
                                    setData({
                                        title: "",
                                        author: "",
                                        description: "",
                                        price: 0
                                    })
                                    setShowModal(false)
                                }}
                        >
                            <div className="flex flex-col gap-3">
                                <label htmlFor="title">Title</label>
                                <input
                                    className="border-2 border-gray-300 p-2 rounded-lg"
                                    type="text"
                                    name="title"
                                    id="title"
                                    required
                                    placeholder="title of book"
                                    value={data.title}
                                    onChange={
                                        (e) => {
                                            handleTitileChange(e);
                                        }
                                    } />

                                <label htmlFor="author">Author</label>
                                <input
                                    className="border-2 border-gray-300 p-2 rounded-lg"
                                    type="text"
                                    name="author"
                                    id="author"
                                    required
                                    placeholder="author of book"
                                    value={data.author}
                                    onChange={
                                        (e) => {
                                            handleAuthorChange(e);
                                        }
                                    }
                                />

                                <label htmlFor="description">Description</label>
                                <textarea
                                    className="border-2 border-gray-300 p-2 rounded-lg"
                                    name="description"
                                    id="description"
                                    cols={30}
                                    rows={10}
                                    required
                                    placeholder="Sinopsis of book"
                                    value={data.description}
                                    onChange={
                                        (e) => {
                                            handleDescriptionChange(e);
                                        }
                                    }
                                />

                                <label htmlFor="price">price</label>
                                <input
                                    className="border-2 border-gray-300 p-2 rounded-lg appearance-none"
                                    name="price"
                                    type="number"
                                    id="price"
                                    required
                                    value={data.price}
                                    placeholder="price of book"
                                    onChange={
                                        (e) => {
                                            handlePriceChange(e);
                                        }
                                    }
                                />
                            </div>
                            <button type="submit" className="bg-blue-500 hover:bg-blue-700 mt-5  text-white font-bold py-2 px-4 rounded">
                                {"Create"}
                            </button>
                        </form>
                    </Modal>

                    {/*mapping list books dari allBooks */}
                    <ListBooks />


                </Fragment>
            </main>
        </>
    );

};

export default Dashboard;

const ListBooks: React.FC = () => {

    const { data: allBooks, isLoading } = api.books?.allBooks.useQuery();

    if (isLoading) return <>Loading...</>;

    return (
        <>
            <div className="flex flex-col gap-3 mx-24 mt-12">
                {allBooks?.map((book) => (
                    <div key={book.id} className="flex flex-row gap-3 items-center">
                        <div className="flex flex-row gap-3">
                            <p className="text-xl font-bold">{book.title}</p>
                            <p className="text-xl font-bold">{book.author}</p>
                            <p className="text-xl font-bold">{book.price}</p>
                        </div>
                        <div className="flex flex-row gap-3">
                            <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                {"Edit"}
                            </button>
                            <button className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                                {"Delete"}
                            </button>
                        </div>
                    </div>
                ))}
            </div>
        </>
    );
}


export const getServerSideProps = async (context: GetServerSidePropsContext,) => {
    const session = await getSession(context);

    if (!session) {
        return {
            redirect: {
                destination: "/",
                permanent: false,
            },
        };
    }

    return {
        props: {
            session,
        },
    };

}

